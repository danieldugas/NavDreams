#!/usr/bin/env python
from __future__ import print_function
# from copy import deepcopy
import numpy as np
import os
import cv2
from pose2d import Pose2D, apply_tf
import rospy
from strictfire import StrictFire
from timeit import default_timer as timer
from sensor_msgs.msg import Image
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
from std_msgs.msg import Header
from visualization_msgs.msg import Marker
from std_srvs.srv import Trigger, TriggerResponse
from stable_baselines3 import PPO
from pepper_2d_simulator import remove_python2_entries_from_sys_path
import threading

from navrep3d.navrep3dtrainencodedenv import NavRep3DTrainEncoder
from navrep3d.navrep3dtrainenv import convert_discrete_to_continuous_action

# these modules do not work with python2, but are put in the python path when sourcing ros
remove_python2_entries_from_sys_path()
if True:
    import tf
    from tf2_ros import TransformException
    from cv_bridge import CvBridge

BACKEND = "GPT"
ENCODING = "V_ONLY"
GPU = False

NO_ROTATION = False

# C_MODEL_PATH = os.path.expanduser("~/navrep3d/models/gym/navrep3dSCRencodedenv_2021_12_12__16_46_51_DISCRETE_PPO_GPT_V_ONLY_V64M64_SCR_bestckpt.zip") # noqa
# C_MODEL_PATH = os.path.expanduser("~/navrep3d/models/gym/navrep3dkozehdencodedenv_2022_01_17__12_55_53_DISCRETE_PPO_GPT_V_ONLY_V64M64_SCR_ckpt.zip" # noqa
C_MODEL_PATH = os.path.expanduser("~/navrep3d/models/gym/navrep3dkozehdoldencodedenv_2022_01_13__16_13_45_DISCRETE_PPO_GPT_V_ONLY_V64M64_SCR_ckpt.zip") # noqa

def noop(*args, **kwargs):
    return TriggerResponse(True, "")

class NavrepNode(object):
    def __init__(self, no_stop=False, hz=False):
        rospy.init_node("navrep_node")
        self.tf_listener = tf.TransformListener()
        # constants
        self.kRobotFrame = "base_footprint"
        self.tf_timeout = rospy.Duration(1.0)
        # V + M  encoder
        self.encoder = NavRep3DTrainEncoder(BACKEND, ENCODING, gpu=GPU)
        # C model
        self.model = PPO.load(C_MODEL_PATH)
        # tools
        self.cv_bridge = CvBridge()
        # init variables
        self.goal_msg = None
        self.latest_img = None
        self.latest_odom = None
        self.prev_action = np.array([0., 0., 0.])
        self.STOP = not no_stop
        self.lock = threading.Lock()
        self.print_hz = hz
        # Publishers
        self.image_pub = rospy.Publisher("/reconstructed_image", Image, queue_size=1)
        self.cmd_vel_pub = rospy.Publisher("/cmd_vel", Twist, queue_size=1)
        self.stopped_pub = rospy.Publisher("/is_stopped", Header, queue_size=1)
        self.resumed_pub = rospy.Publisher("/is_resumed", Header, queue_size=1)
        # Services
        rospy.Service('stop_autonomous_motion', Trigger,
                      self.stop_autonomous_motion_service_call)
        rospy.Service('resume_autonomous_motion', Trigger,
                      self.resume_autonomous_motion_service_call)
        # Ros routines
        rospy.Subscriber("/camera/color/image_raw", Image, self.img_callback, queue_size=1)
        rospy.Subscriber("/global_planner/current_waypoint", Marker, self.waypoint_callback, queue_size=1)
        rospy.Subscriber("/pepper_robot/odom", Odometry, self.odom_callback, queue_size=1)
        rospy.Subscriber("/goal_reached", Header, self.goal_reached_callback, queue_size=1)
        rospy.Timer(rospy.Duration(0.1), self.callback)
        rospy.spin()

    def img_callback(self, msg):
        with self.lock:
            self.latest_img = msg

    def callback(self, event=None):
        with self.lock:
            if self.latest_odom is None:
                rospy.logwarn_throttle_identical(3.0, "Waiting for odometry")
                return
            if self.goal_msg is None:
                rospy.logwarn_throttle_identical(3.0, "Waiting for goal")
                return
            if self.latest_img is None:
                rospy.logwarn_throttle_identical(3.0, "Waiting for image")
                return
            # compute goal in robot frame
            tf_msg_in_robot = self.get_msg_to_robot_tf(self.goal_msg, time=rospy.Time.now())
            if tf_msg_in_robot is None:
                rospy.logwarn_throttle_identical(3.0, "Waiting for goal in robot transform")
                return
            pose2d_msg_in_robot = Pose2D(tf_msg_in_robot)
            goal_in_msg = np.array([self.goal_msg.pose.position.x, self.goal_msg.pose.position.y])
            goal_in_robot = apply_tf(goal_in_msg, pose2d_msg_in_robot)
            # TODO: is the scan start angle the same as in RL env?
            _64 = 64
            _C = 3
            image = np.zeros((_64, _64, _C))
            cv_image = self.cv_bridge.imgmsg_to_cv2(self.latest_img, desired_encoding="rgba8")
            image = cv2.resize(cv_image, (64, 64))[:, :, :3]
            robot_state = np.zeros((5,))
            # in robot frame:
            robot_state[0] = goal_in_robot[0]
            robot_state[1] = goal_in_robot[1]
#             robot_state[0] = goal_in_robot[1]
#             robot_state[1] = -goal_in_robot[0]
            robot_state[2] = self.latest_odom.twist.twist.linear.x
            robot_state[3] = self.latest_odom.twist.twist.linear.y
            robot_state[4] = self.latest_odom.twist.twist.angular.z
            obs = (image, robot_state)

            # holonomic C action
            tic = timer()
            encoded_obs = self.encoder._encode_obs(obs, self.prev_action)
            discrete_action, _ = self.model.predict(encoded_obs, deterministic=True)
            action = convert_discrete_to_continuous_action(discrete_action)
            toc = timer()
            if self.print_hz:
                print("Inference: {}s".format(toc-tic))

            # store action
            self.prev_action = action

            # ros publish
#             out_msg = deepcopy(self.latest_img)
#             predicted_ranges = self.encoder._get_last_decoded_scan()
#             out_msg.ranges = tuple(predicted_ranges)
#             self.lidar_pub.publish(out_msg)

            # post-process
            postproc_action = action * 1.
            postproc_action[0] = postproc_action[0] * 0.2
            postproc_action[1] = postproc_action[1] * 0.2

            print(robot_state)
            print(action)

            if not self.STOP:
                print(postproc_action)
                cmd_vel_msg = Twist()
                cmd_vel_msg.linear.x = postproc_action[0]
                cmd_vel_msg.linear.y = postproc_action[1]
                cmd_vel_msg.angular.z = postproc_action[2]
                self.cmd_vel_pub.publish(cmd_vel_msg)
            else:
                print(postproc_action, "STOPPED")

    def get_msg_to_robot_tf(self, msg, time):
        try:
            tf_info = [self.kRobotFrame, msg.header.frame_id, time]
            self.tf_listener.waitForTransform(*(tf_info + [self.tf_timeout]))
            tf_msg_in_robot = self.tf_listener.lookupTransform(*tf_info)
        except (
            tf.LookupException,
            tf.ConnectivityException,
            tf.ExtrapolationException,
            TransformException,
        ) as e:
            rospy.logwarn(
                "[{}.{}] tf to robot frame for time {}.{} not found: {}".format(
                    rospy.Time.now().secs,
                    rospy.Time.now().nsecs,
                    time.secs,
                    time.nsecs,
                    e,
                )
            )
            return None
        return tf_msg_in_robot

    def waypoint_callback(self, msg):
        with self.lock:
            self.goal_msg = msg

    def goal_reached_callback(self, msg):
        with self.lock:
            print("goal reached")
            self.goal_msg = None

    def odom_callback(self, msg):
        with self.lock:
            self.latest_odom = msg

    def stop_autonomous_motion_service_call(self, req):
        with self.lock:
            if not self.STOP:
                print("Surrendering robot control")
                cmd_vel_msg = Twist()
                self.cmd_vel_pub.publish(cmd_vel_msg)
            self.STOP = True
            # useful to tell other nodes that we are stopped
            msg = Header()
            msg.stamp = rospy.Time.now()
            msg.frame_id = "autonomous_motion_is_stopped"
            self.stopped_pub.publish(msg)
        return TriggerResponse(True, "")

    def resume_autonomous_motion_service_call(self, req):
        with self.lock:
            if self.STOP:
                print("Assuming robot control")
                # assume old goal is stale, wait for new goal
                self.goal_msg = None
            self.STOP = False
            # useful to tell other nodes that we are no longer stopped
            msg = Header()
            msg.stamp = rospy.Time.now()
            msg.frame_id = "autonomous_motion_is_resumed"
            self.resumed_pub.publish(msg)
        return TriggerResponse(True, "")

def main(no_stop=False):
    NavrepNode(no_stop=no_stop)


if __name__ == "__main__":
    np.set_printoptions(precision=2, suppress=True)
    navrep_node = StrictFire(main)
